defaults: &defaults
  docker:
    - image: circleci/node:14.14.0
  working_directory: ~/almond-be

cmd_install_packages: &cmd_install_packages
  run:
    name: Install project dependencies
    command: |
      yarn install
      yarn add argon2

cmd_restore_cache: &cmd_restore_cache
  restore_cache:
    keys:
      - yarn-packages-{{ checksum "yarn.lock" }}

cmd_save_cache: &cmd_save_cache
  save_cache:
    key: yarn-packages-{{ checksum "yarn.lock" }}
    paths:
      - ~/.cache/yarn
      - node_modules

cmd_download_cc_test_reporter: &cmd_download_cc_test_reporter
  run:
    name: Install code climate test reporter
    command: |
      mkdir -p tmp/
      curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > /tmp/cc-test-reporter
      chmod +x /tmp/cc-test-reporter

cmd_build_and_push_docker: &cmd_build_and_push_docker
  run:
    name: build image
    command: |
      export IMG_TAG=$(echo $CIRCLE_SHA1 | cut -c -7)
      echo $IMG_TAG
      docker login -u _json_key -p "$(echo $SERVICE_ACCOUNT)" https://gcr.io
      docker build -t gcr.io/${GCP_PROJECT_ID}/${PROJECT_NAME}:${IMG_TAG} -f docker/release/Dockerfile .
      docker push gcr.io/${GCP_PROJECT_ID}/${PROJECT_NAME}:${IMG_TAG}

cmd_attach_workspace: &cmd_attach_workspace
  attach_workspace:
    at: tmp/

persist_to_workspace: &persist_to_workspace
  persist_to_workspace:
    root: .
    paths: .

filters: &filters
  filters:
    branches:
      only:
        - /^(.*?(\bcircleci\b)[^$]*)$/
        - develop
        - master

# The CircleCi Jobs Tree
version: 2
jobs:
  checkout_code:
    <<: *defaults
    steps:
      - checkout
      - *cmd_restore_cache
      - *cmd_install_packages
      - *cmd_save_cache
      - *persist_to_workspace

  package_vulnerability_check:
    <<: *defaults
    steps:
      - *cmd_attach_workspace
      - *cmd_install_packages
      - run:
          name: Run npm packages security vulnerabilty check
          command: |
            yarn check --integrity
            npx nsp check

  test_and_report:
    <<: *defaults
    steps:
      - checkout
      - *cmd_restore_cache
      - *cmd_attach_workspace
      - *cmd_install_packages
      - *cmd_download_cc_test_reporter
      - run:
          name: Run tests
          no_output_timeout: 30m
          command: |
            # copy env vars from the ci environment
            env >> .env
            cat .env
            yarn test:unit --coverage
            /tmp/cc-test-reporter format-coverage -t lcov -o tmp/codeclimate.unittest.json coverage/unittest/lcov.info
      - persist_to_workspace:
          root: tmp
          paths:
            - codeclimate.unittest.json

  build_artifacts:
    <<: *defaults
    steps:
      - *cmd_attach_workspace
      - *cmd_install_packages
      - run: yarn run build
      - *persist_to_workspace

  upload_coverage:
    <<: *defaults
    steps:
      - checkout
      - *cmd_download_cc_test_reporter
      - *cmd_attach_workspace
      - run:
          name: Upload coverage results to code climate
          command: |
            /tmp/cc-test-reporter sum-coverage -p 1 -o /tmp/codeclimate.total.json tmp/codeclimate.*.json
            /tmp/cc-test-reporter upload-coverage -i /tmp/codeclimate.total.json
            sed -n -e 24p /tmp/codeclimate.total.json

  docker_and_deploy:
    docker:
      - image: gcr.io/$GCP_PROJECT_ID/tembea-ci-image
        auth:
          username: _json_key
          password: $SERVICE_ACCOUNT
        environment:
          GOOGLE_APPLICATION_CREDENTIALS: /root/almond-be/shared/account.json

    working_directory: ~/almond-be
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - *cmd_attach_workspace
      #      - *cmd_login_gcp
      - *cmd_build_and_push_docker
      - run:
          name: Clone the deployment scripts repo
          command: |
            mkdir ~/.ssh/ && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
            echo ${DEPLOYMENT_SCRIPTS_REPO}
            if [ "${CIRCLE_BRANCH}" = "master" ]; then
              git clone -b master ${DEPLOYMENT_SCRIPTS_REPO}
            elif [ "${CIRCLE_BRANCH}" = "develop" ]; then
              git clone -b develop ${DEPLOYMENT_SCRIPTS_REPO}
            fi

      - deploy:
          name: Run K8s configurations to deploy the app
          command: |
            cd tembea-deployment-scripts/ansible/backend
            export IMG_TAG=$(echo $CIRCLE_SHA1 | cut -c -7)
            if [ "${CIRCLE_BRANCH}" = "master" ]; then
              export NAMESPACE="production"
              echo $NAMESPACE
              export NODE_ENV=${NAMESPACE}
              ansible-playbook playbook.yml --extra-vars "@prod-vars.yml" -vvv
            elif [ "${CIRCLE_BRANCH}" = "develop" ]; then
              export NAMESPACE="staging"
              echo $NAMESPACE
              export NODE_ENV=${NAMESPACE}
              ansible-playbook playbook.yml --extra-vars "@dev-vars.yml" -vvv
            fi

# The Workflow tree
workflows:
  version: 2
  check_build_deploy:
    jobs:
      - checkout_code
      #      - package_vulnerability_check:
      #          requires:
      #            - checkout_code
      - test_and_report:
          requires:
            - checkout_code
      - upload_coverage:
          requires:
            - test_and_report
      - build_artifacts:
          requires:
            - checkout_code
            # - package_vulnerability_check
            - test_and_report
          <<: *filters
      - docker_and_deploy:
          requires:
            - checkout_code
            # - package_vulnerability_check
            - test_and_report
            - build_artifacts
          <<: *filters
