version: '3'

services:
  app:
    container_name: app
    restart: always
    build: ./
    env_file: .env
    expose:
      - 8080
    depends_on:
      - db
      - redis
    networks:
      - app-network

  db:
    image: mongo:4.4.2-bionic
    container_name: db
    restart: always
    env_file: .env
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    volumes:
      - dbdata:/data/db
    networks:
      - app-network
    ports:
      - '27017:27017'
    expose:
      - 27017

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: always
    env_file: .env
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_USERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_PASSWORD}
      - ME_CONFIG_MONGODB_SERVER=${MONGO_HOSTNAME}
      - ME_CONFIG_MONGODB_PORT=${MONGO_PORT}
    ports:
      - '8082:8081'
    depends_on:
      - db
    networks:
      - app-network

  redis:
    image: redis:6.0.6-alpine
    container_name: redis
    restart: always
    networks:
      - app-network

  nginx:
    container_name: nginx
    build: ./nginx
    restart: unless-stopped
    env_file: .env
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - /etc/ssl:/etc/ssl
      - /var/run/docker.sock:/tmp/docker.sock
    depends_on:
      - app
    networks:
      - app-network
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''

networks:
  app-network:
    driver: bridge

volumes:
  dbdata:
    driver: local
